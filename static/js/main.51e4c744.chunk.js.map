{"version":3,"sources":["images/prehistoricageicons/black/PrehistoricIcon_44_b.png","images/gemsicons/addons/gems_add_136.png","images/strategygameicons/SGI_86.png","components/Tile/TileUI.tsx","components/Tile/Tile.ts","redux/modules/game/gameActions.ts","components/AppUI.tsx","components/App.tsx","serviceWorker.ts","redux/modules/appReducer.ts","scripts/localStorageService.ts","scripts/utils/numberUtils.ts","redux/modules/game/gameReducer.ts","redux/modules/game/generateGameTiles.ts","redux/rootReducer.ts","theme.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","tileImage","display","maxWidth","maxHeight","overflow","padding","mapDispatchToProps","flipTile","tileId","type","Tile","connect","state","phase","game","props","classes","tile","image","isSelected","selectedTiles","id","facingUp","tileFacingUp","tileBackImage","src","alt","onClick","className","createStyles","rootContainer","height","gridY","flexDirection","justifyContent","gridX","flexWrap","App","Container","tileY","map","row","rowIndex","tiles","Boolean","window","location","hostname","match","initialState","paletteType","itemKey","maybeItemValue","localStorage","getItem","JSON","parse","localStorageService","numberUtils","min","max","Math","ceil","floor","random","levelConfig","xCount","yCount","tileImages","Array","from","gemIcon","pathIcon","_","yIndex","__","xIndex","imageIndex","length","splice","generateGameTiles","ensureMatchingPhase","actionType","WrongPhaseError","currentPhase","Error","rootReducer","combineReducers","app","action","console","log","matchingPhase","newSelectedTiles","size","newSelectedTilesArray","keys","isMatch","themePalette","primary","main","secondary","error","red","A400","themePaletteBackground","store","createStore","AppRoot","StrictMode","ThemeProvider","getState","createMuiTheme","palette","background","default","CssBaseline","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.51e4c744.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PrehistoricIcon_44_b.e7dba318.png\";","module.exports = __webpack_public_path__ + \"static/media/gems_add_136.67bffa2a.png\";","module.exports = __webpack_public_path__ + \"static/media/SGI_86.f386ff8a.png\";","import React from \"react\";\nimport tileBackImage from \"../../images/prehistoricageicons/black/PrehistoricIcon_44_b.png\";\nimport { TileProps } from \"./Tile\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  tileImage: {\n    display: \"flex\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    overflow: \"auto\",\n    padding: \"5px\",\n  },\n}));\n\nexport const TileUI: React.FC<TileProps> = props => {\n  const classes = useStyles();\n\n  const tile = props.tile;\n  const facingUp = tileFacingUp(props);\n  const image = facingUp ? tile.image : tileBackImage;\n  return (\n    <img\n      src={image}\n      alt=\"tile\"\n      onClick={() => {\n        if (!tile.facingUp) {\n          props.flipTile(tile.id);\n        }\n      }}\n      className={classes.tileImage}\n    />\n  );\n};\n\nfunction tileFacingUp(props: TileProps): boolean {\n  const isSelected =\n    props.phase.type === \"matching\" &&\n    !!props.phase.selectedTiles[props.tile.id];\n  return props.tile.facingUp || isSelected;\n}\n","import { flipTile } from \"./../../redux/modules/game/gameActions\";\nimport { TileUI } from \"./TileUI\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../../redux/rootReducer\";\nimport { TileType } from \"../../redux/modules/game/gameTypes\";\n\nconst mapStateToProps = (state: RootState) => ({\n  phase: state.game.phase,\n});\n\nconst mapDispatchToProps = { flipTile };\n\ntype StateProps = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps;\n\nexport type TileProps = { tile: TileType } & StateProps;\n\nexport const Tile = connect(mapStateToProps, mapDispatchToProps)(TileUI);\n","type FlipTileAction = {\n  type: \"game_flipTile\";\n  tileId: string;\n};\nexport const flipTile = (tileId: string): FlipTileAction => ({\n  type: \"game_flipTile\",\n  tileId,\n});\n\nexport type GameAction = { type: \"game_unit\" } | FlipTileAction;\n","import React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Grid, Button, Divider, Link, Container } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { AppProps } from \"./App\";\nimport { Tile } from \"./Tile/Tile\";\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    rootContainer: {\n      height: \"100vh\",\n    },\n    gridY: {\n      height: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: \"15px 0 15px 0\",\n    },\n    gridX: {\n      maxHeight: \"100%\",\n      overflow: \"auto\",\n      flexWrap: \"nowrap\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n    },\n  }),\n);\n\nexport const AppUI: React.FC<AppProps> = props => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.rootContainer}>\n      <div className={classes.gridY}>\n        {props.game.tileY.map((row, rowIndex) => {\n          return (\n            <div className={classes.gridX}>\n              {row.map(tileId => {\n                return <Tile tile={props.game.tiles[tileId]} />;\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </Container>\n  );\n};\n","import { RootState } from \"../redux/rootReducer\";\nimport { connect } from \"react-redux\";\nimport { AppUI } from \"./AppUI\";\n\nconst mapStateToProps = (state: RootState) => state;\n\nconst mapDispatchToProps = {};\n\ntype StateProps = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps;\n\nexport type AppProps = StateProps;\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppUI);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { localStorageService } from \"../../scripts/localStorageService\";\nimport { PaletteType } from \"@material-ui/core\";\n\ntype AppView = \"matching\" | \"replacing\" | \"gameOver\";\n\ntype AppState = {\n  paletteType: PaletteType;\n};\nconst initialState: AppState = {\n  paletteType: localStorageService.getItem(\"paletteType\") || \"dark\",\n};\n\nexport const updatePaletteType = (\n  paletteType: PaletteType,\n): UpdatePaletteTypeAction => ({\n  type: \"app_updatePaletteType\",\n  paletteType,\n});\ntype UpdatePaletteTypeAction = {\n  type: \"app_updatePaletteType\";\n  paletteType: PaletteType;\n};\n\ntype AppAction = { type: \"app_unit\" } | UpdatePaletteTypeAction;\n\nexport function appReducer(state = initialState, action: AppAction): AppState {\n  switch (action.type) {\n    case \"app_unit\":\n      return state;\n    case \"app_updatePaletteType\":\n      return { ...state, paletteType: action.paletteType };\n    default:\n      const _: never = action;\n      return state;\n  }\n}\n","import { PaletteType } from \"@material-ui/core\";\n\ntype LocalStorageItem = {\n  paletteType: PaletteType;\n};\n\ntype ValueOfLocalStorage = LocalStorageItem[keyof LocalStorageItem];\n\nexport const localStorageService = {\n  getItem: (itemKey: keyof LocalStorageItem): ValueOfLocalStorage | null => {\n    const maybeItemValue = localStorage.getItem(itemKey);\n    return maybeItemValue ? JSON.parse(maybeItemValue) : null;\n  },\n  setItem: (\n    itemKey: keyof LocalStorageItem,\n    itemValue: ValueOfLocalStorage,\n  ) => {\n    localStorage.setItem(itemKey, JSON.stringify(itemValue));\n  },\n};\n","export const numberUtils = {\n  getRandomInt: (min: number, max: number) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n  },\n};\n","import { SelectedTiles } from \"./gameTypes.d\";\nimport { GameAction } from \"./gameActions\";\nimport gemIcon from \"../../../images/gemsicons/addons/gems_add_136.png\";\nimport pathIcon from \"../../../images/strategygameicons/SGI_86.png\";\nimport { GameState, GamePhaseType } from \"./gameTypes\";\nimport { generateGameTiles } from \"./generateGameTiles\";\nimport __ from \"underscore\";\n\nconst initialState: GameState = {\n  phase: { type: \"matching\", selectedTiles: {} },\n  ...generateGameTiles(),\n};\n\nexport function gameReducer(\n  state = initialState,\n  action: GameAction,\n): GameState {\n  console.log(\"gameReducer: previous state\", state);\n  switch (action.type) {\n    case \"game_unit\":\n      return state;\n    case \"game_flipTile\":\n      const matchingPhase = ensureMatchingPhase(state, action.type);\n\n      const newSelectedTiles: SelectedTiles =\n        __.size(matchingPhase.selectedTiles) < 2\n          ? { ...matchingPhase.selectedTiles, [action.tileId]: true }\n          : { [action.tileId]: true };\n      // if (newSelectedTiles.length === 2){\n      //   if (state.tiles[newSelectedTiles[0]].image === state.tiles[newSelectedTiles[1]].image){\n\n      //   }\n      // }\n      const newSelectedTilesArray = __.keys(newSelectedTiles);\n      const isMatch =\n        !!newSelectedTilesArray[0] &&\n        !!newSelectedTilesArray[1] &&\n        state.tiles[newSelectedTilesArray[0]].image ===\n          state.tiles[newSelectedTilesArray[1]].image;\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [newSelectedTilesArray[0]]: {\n            ...state.tiles[newSelectedTilesArray[0]],\n            facingUp: isMatch,\n          },\n          [newSelectedTilesArray[1]]: {\n            ...state.tiles[newSelectedTilesArray[1]],\n            facingUp: isMatch,\n          },\n        },\n        phase: {\n          ...matchingPhase,\n          selectedTiles: newSelectedTiles,\n        },\n      };\n\n    default:\n      const _: never = action;\n      return state;\n  }\n}\n\nfunction ensureMatchingPhase(state: GameState, actionType: string) {\n  if (state.phase.type !== \"matching\")\n    throw new WrongPhaseError(actionType, state.phase.type);\n  return state.phase;\n}\n\nclass WrongPhaseError extends Error {\n  constructor(actionType: string, currentPhase: GamePhaseType) {\n    super(`Incorrect phase of ${currentPhase} for ${actionType}`);\n  }\n}\n","import { numberUtils } from \"./../../../scripts/utils/numberUtils\";\nimport { TileYArray, TileType } from \"./gameTypes.d\";\nimport gemIcon from \"../../../images/gemsicons/addons/gems_add_136.png\";\nimport pathIcon from \"../../../images/strategygameicons/SGI_86.png\";\n\nfunction getLevelConfig() {\n  return {\n    xCount: 4,\n    yCount: 5,\n    tileImages: [\n      ...Array.from(Array(10), () => gemIcon),\n      ...Array.from(Array(10), () => pathIcon),\n    ],\n  };\n}\n\nexport function generateGameTiles(): {\n  tileY: TileYArray;\n  tiles: { [id: string]: TileType };\n} {\n  let levelConfig = getLevelConfig();\n  let tiles = {};\n  const tileY = Array.from(Array(levelConfig.yCount)).map((_, yIndex) => {\n    return Array.from(Array(levelConfig.xCount)).map((__, xIndex) => {\n      const imageIndex = numberUtils.getRandomInt(\n        0,\n        levelConfig.tileImages.length,\n      );\n      const image = levelConfig.tileImages[imageIndex];\n\n      levelConfig.tileImages.splice(imageIndex, 1);\n\n      const tile = {\n        id: `${xIndex}/${yIndex}`,\n        image,\n        facingUp: false,\n      };\n      tiles = { ...tiles, [tile.id]: tile };\n      return tile.id;\n    });\n  });\n  return {\n    tileY,\n    tiles,\n  };\n}\n","import { combineReducers } from \"redux\";\nimport { appReducer } from \"./modules/appReducer\";\nimport { gameReducer } from \"./modules/game/gameReducer\";\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  game: gameReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { red } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { PaletteType } from \"@material-ui/core\";\n\nexport const themePalette = {\n  primary: {\n    main: \"#556cd6\",\n  },\n  secondary: {\n    main: \"#19857b\",\n  },\n  error: {\n    main: red.A400,\n  },\n};\n\nexport const themePaletteBackground = {\n  light: \"#fafafa\",\n  dark: \"#303030\",\n};\n\n// A custom theme for this app\nexport const themeFactory = (paletteType: PaletteType) => {\n  return createMuiTheme({\n    palette: {\n      type: paletteType,\n      ...themePalette,\n      background: {\n        default:\n          paletteType === \"light\"\n            ? themePaletteBackground.light\n            : themePaletteBackground.dark,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { themeFactory } from \"./theme\";\n\nconst store = createStore(rootReducer);\n\nconst AppRoot = () => {\n  return (\n    <Provider store={store}>\n      <React.StrictMode>\n        <ThemeProvider theme={themeFactory(store.getState().app.paletteType)}>\n          <CssBaseline></CssBaseline>\n          <App />\n        </ThemeProvider>\n      </React.StrictMode>\n    </Provider>\n  );\n};\n\nReactDOM.render(<AppRoot />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}